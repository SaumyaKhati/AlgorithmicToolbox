import java.io.BufferedReader;import java.io.InputStreamReader;public class Main {    public static void main(String[] args) throws Exception{        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        //for problem 1        int money = Integer.parseInt(br.readLine());        System.out.println(problemOne(money));    }    /**     * Straightforward implementation of the example given in the lesson     * @param money amt. required to be turned into change     * @return change amount for money     */    private static int problemOne(int money){        int numCoins; //keep track of coin numbers per coin denomination.        int[] minNumCoins = new int[money+1]; //store min. change needed for each num up to total money        minNumCoins[0]=0; //0 change needed for 0 money        int [] coinTypes = {1, 3, 4}; //store coin denominations        //go through entire MNC array and store min for each value as well as use prev. stored val. to calculate current one        for(int j = 1; j < minNumCoins.length; j++){            //change at the start must be "infinite" so that any calc. number after this is always smaller.            minNumCoins[j] =  999999999;            //go through all coin denominations to find the one that results in min. combo            for(int i = 0; i < 3; i++){                //if j, ie. current money value is greater than coin denomination then calc. change                if(j >= coinTypes[i]){                    numCoins = minNumCoins[j-coinTypes[i]]+1; //number is equal to 1 plus money-coin denomination as taught.                    if(numCoins < minNumCoins[j]){                        minNumCoins[j]=numCoins; //if numCoins is smaller then stored val, then substitute.                    }                }            }        }        return minNumCoins[money]; //return change value for money amount.    }}