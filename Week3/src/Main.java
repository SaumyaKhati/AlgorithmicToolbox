import java.io.BufferedReader;import java.io.InputStreamReader;public class Main {    public static void main(String[] args) throws Exception{        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        //for problem 1//        int N = Integer.parseInt(br.readLine());//        System.out.println(problemOne(N));        //for problem 2//        String[]info = br.readLine().split(" ");//        int n = Integer.parseInt(info[0]), W = Integer.parseInt(info[1]);//        TreeMap<Double, Integer> set = new TreeMap <>(Collections.reverseOrder());////        for(int i = 0; i < n; i++){//            String []line = br.readLine().split(" ");//            set.put((double)Integer.parseInt(line[0])/Integer.parseInt(line[1]),Integer.parseInt(line[1]));//        }////        System.out.printf("%.4f" , problemTwo(n, W, set));        //for problem 3//        int d = Integer.parseInt(br.readLine()), maxPerRefill = Integer.parseInt(br.readLine()), n = Integer.parseInt(br.readLine());//        int[] stations = new int[n+2];//        stations[0] = 0;//        stations[stations.length-1]=d;////        String [] stationString = br.readLine().split(" ");////        for(int i =1; i < stations.length-1; i++){//            stations[i]= Integer.parseInt(stationString[i-1]);//        }////        System.out.println(problemThree(d, maxPerRefill, stations));        //for problem 4//        int n = Integer.parseInt(br.readLine());//        long[] pairA = new long[n];//        long[]pairB = new long[n];////        String[]pairsA= br.readLine().split(" ");//        String[]pairsB =br.readLine().split(" ");////        for(int i =0; i< n; i++){//            pairA[i] = Long.parseLong(pairsA[i]);//        }////        for(int i =0; i< n; i++){//            pairB[i] = Long.parseLong(pairsB[i]);//        }////        Arrays.sort(pairA);//        Arrays.sort(pairB);////        System.out.println(problemFour(n,pairA,pairB));        //for problem 5//        int n = Integer.parseInt(br.readLine());//        int[][]set = new int[n][2];////        for(int i = 0; i< n; i++){//            String[]line = br.readLine().split(" ");//            int a = Integer.parseInt(line[0]), b = Integer.parseInt(line[1]);//            set[i][0]=a;//            set[i][1]=b;//        }////        int col = 1;//        Arrays.sort(set, new Comparator <int[]>() {//            @Override//            public int compare(int[] o1, int[] o2) {//                if(o1[col] > o2[col]){//                    return 1;//                }//                else{//                    return -1;//                }//            }//        });////        problemFive(n, set);        //for problem 6    }//    private static int problemOne(int N){//        int totalCoins = 0;////        while(N > 0){//            if(N/10 > 0){//                totalCoins+= N/10;//                N%=10;//            }//            else if(N/5 > 0){//                totalCoins+=N/5;//                N%=5;//            }//            else{//                totalCoins+=N;//                N=0;//            }//        }//        return totalCoins;//    }//    private static double problemTwo(int n, long W, TreeMap<Double, Integer> set){//        double maxVal = 0;////        for(Double val: set.keySet()){//            if(W==0)return maxVal;////            double amt = Math.min(set.get(val),W);//            maxVal += amt*val;//            W -= amt;//            int weight = (int)(set.get(val)-amt);//            set.put(val, weight);//        }////        return maxVal;//    }//    private static int problemThree(int miles, int maxPerRefill, int[] stations){//        int numRefill = 0, currentStation = 0;////        while(currentStation < stations.length-1){//            int lastStation = currentStation;////            while(currentStation < stations.length-1 && (stations[currentStation+1] - stations[lastStation]) <= maxPerRefill){//                currentStation++;//            }////            if(currentStation == lastStation){//                return -1;//            }////            if(currentStation < stations.length-1){//                numRefill++;//            }//        }//        return numRefill;//    }//    private static long problemFour(int N, long[]pairA, long[]pairB){//        long sum = 0;////        for(int i = N-1; i >=0; i--){//            sum+=pairA[i]*pairB[i];//        }////        return sum;//    }//    private static void problemFive(int N, int[][]set){//        int currPos = 0;////        ArrayList<Integer> list = new ArrayList <>();////        for(; currPos < N;){//            if(currPos == set.length-1 && !list.contains(set[currPos][1])){//                list.add(set[currPos][1]);//                break;//            }//            int nextPos = currPos+1;////            if(set[nextPos][0] > set[currPos][1]){//                list.add(set[currPos][1]);//                currPos++;//            }//            else {//                while(nextPos < set.length && set[nextPos][0] <= set[currPos][1]){//                    nextPos++;//                }//                list.add(set[currPos][1]);//                currPos=nextPos;//            }//        }////        System.out.println(list.size());////        for(int i = 0; i < list.size(); i++){//            System.out.print(list.get(i) + " ");//        }//    }}